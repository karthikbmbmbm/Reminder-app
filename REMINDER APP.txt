import 'bundle:flutter/cloth.Dart';
import 'package:syncfusion_flutter_datepicker/datepicker.Dart';
import 'package deal:flutter_local_notifications/flutter_local_notifications.Dart';

void important() => runApp(MyApp());

magnificence MyApp extends StatelessWidget 
  @override
  Widget construct(BuildContext context) 
    return MaterialApp(
      title: 'Reminder App',
      subject matter: ThemeData(
        primarySwatch: Colors.Blue,
      ),
      domestic: ReminderApp(),
    );
  


magnificence ReminderApp extends StatefulWidget 
  @override
  _ReminderAppState createState() => _ReminderAppState();


magnificence _ReminderAppState extends State<ReminderApp> 
  final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();
  DateTime? SelectedDate;
  TimeOfDay? SelectedTime;
  String? SelectedActivity;
  List<String> activities = [
    'Wake up',
    'Go to gym',
    'Breakfast',
    'Meetings',
    'Lunch',
    'Quick nap',
    'Go to library',
    'Dinner',
    'Go to sleep'
  ];

  @override
  void initState() 
    first-rate.InitState();
    _initNotifications();
  

  Future<void> _initNotifications() async 
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/ic_launcher');
    const InitializationSettings initializationSettings =
        InitializationSettings(android: initializationSettingsAndroid);
    look ahead to flutterLocalNotificationsPlugin.Initialize(initializationSettings);
  

  Future<void> _scheduleNotification() async 
    if (selectedDate != null && selectedTime != null && selectedActivity != null) 
      final DateTime scheduledTime = DateTime(
        selectedDate!.Yr,
        selectedDate!.Month,
        selectedDate!.Day,
        selectedTime!.Hour,
        selectedTime!.Minute,
      );

      const AndroidNotificationDetails androidNotificationDetails =
          AndroidNotificationDetails(
        'channel identification',
        'channel call',
        channelDescription: 'channel description',
      );
      const NotificationDetails notificationDetails =
          NotificationDetails(android: androidNotificationDetails);

      wait for flutterLocalNotificationsPlugin.ZonedSchedule(
        zero,
        selectedActivity!,
        selectedActivity!,
        scheduledTime,
        notificationDetails,
        androidAllowWhileIdle: authentic,
        uiLocalNotificationTriggered: (notificationId, payload) 
          // Handle UI notification prompted
        ,
      );
    
  

  @override
  Widget build(BuildContext context) 
    go back Scaffold(
      appBar: AppBar(
        title: Text('Reminder App'),
      ),
      body: Padding(
        padding: const EdgeInsets.All(sixteen.Zero),
        infant: Column(
          crossAxisAlignment: CrossAxisAlignment.Stretch,
          kids: <Widget>[
            Text(
              'Select Date:',
              style: TextStyle(fontSize: 18),
            ),
            SizedBox(height: 16),
            SfDateRangePicker(
              onSelectionChanged: (DateRangePickerSelectionChangedArgs args) 
                setState(() 
                  selectedDate = args.Price;
                );
              ,
              initialSelectedDate: DateTime.Now(),
              selectionMode: DateRangePickerSelectionMode.Single,
            ),
            SizedBox(top: sixteen),
            Text(
              'Select Time:',
              style: TextStyle(fontSize: 18),
            ),
            SizedBox(top: 16),
            ElevatedButton(
              onPressed: () async 
                TimeOfDay? PickedTime = anticipate showTimePicker(
                  context: context,
                  initialTime: TimeOfDay.Now(),
                );

                if (pickedTime != null) 
                  setState(() 
                    selectedTime = pickedTime;
                  );
                
              ,
              baby: Text(
                selectedTime != null
                    ? '$selectedTime!.Hour:$selectedTime!.Minute'
                    : 'Select Time',
              ),
            ),
            SizedBox(top: sixteen),
            Text(
              'Select Activity:',
              fashion: TextStyle(fontSize: 18),
            ),
            SizedBox(height: sixteen),
            DropdownButton<String>(
              cost: selectedActivity,
              trace: Text('Select Activity'),
              objects: activities.Map((String hobby) 
                go back DropdownMenuItem<String>(
                  fee: hobby,
                  baby: Text(interest),
                );
              ).ToList(),
              onChanged: (String? NewValue) 
                setState(() 
                  selectedActivity = newValue;
                );
              ,
            ),
            SizedBox(peak: sixteen),
            ElevatedButton(
              onPressed: _scheduleNotification,
              child: Text('Set Reminder'),
            ),
          ],
        ),
      ),
    );
  
